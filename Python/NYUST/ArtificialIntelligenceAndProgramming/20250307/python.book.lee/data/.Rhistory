set.seed(168)
ind <- sample(nrow(diamonds), size = 500)
mydf <- diamonds[sample(nrow(diamonds), size = 500),]
set.seed(168)
mydf <- diamonds[sample(nrow(diamonds), size = 500),]
plot(mydf$carat[ind], mydf$price)
plot(mydf$carat, log(mydf$price))
plot(mydf$carat, mydf$price)
plot(mydf$carat, log(mydf$price))
set.seed(123456)
mydf <- diamonds[sample(nrow(diamonds), size = 500),]
plot(mydf$carat, mydf$price)
plot(log(mydf$carat), log(mydf$price))
par(nfrow=c(2,1))
par(mfrow=c(2,1))
plot(mydf$carat, mydf$price)
plot(log(mydf$carat), log(mydf$price))
par(mfrow=c(1,2))
plot(mydf$carat, mydf$price)
plot(log(mydf$carat), log(mydf$price))
par(mfrow=c(1,1))
plot(mydf$carat, mydf$price)
plot(log(mydf$carat), log(mydf$price))
# 標準化 scale
(x <- matrix(1:30, ncol = 3))
scale(x) # mean=0, sd=1
# R 練習-將 Cars93$Price 資料轉換為1~5之間
# 標準化－最小值/最大值法
x <- Cars93[1:10,]
x$Price
(max.old <- max(x$Price))
(min.old <- min(x$Price))
price.new <- ((x$Price - min.old)/(max.old - min.old))*(5 - 1) + 1
price.new
# 3. 長寬資料轉換 long and wide data -----
olddata_wide <- read.table(header=TRUE, text="
subject sex control cond1 cond2
1   M     7.9  12.3  10.7
2   F     6.3  10.6  11.1
3   F     9.5  13.1  13.8
4   M    11.5  13.4  12.9
")
olddata_wide
# 3. 長寬資料轉換 long and wide data -----
olddata_wide <- read.table(header=TRUE, text="
subject sex control cond1 cond2
1   M     7.9  12.3  10.7
2   F     6.3  10.6  11.1
3   F     9.5  13.1  13.8
4   M    11.5  13.4  12.9
")
# 群組欄位須為 factor
olddata_wide$subject <- factor(olddata_wide$subject)
str(olddata_wide)
olddata_wide
olddata_long <- read.table(header=TRUE, text='
subject sex condition measurement
1   M   control         7.9
1   M     cond1        12.3
1   M     cond2        10.7
2   F   control         6.3
2   F     cond1        10.6
2   F     cond2        11.1
3   F   control         9.5
3   F     cond1        13.1
3   F     cond2        13.8
4   M   control        11.5
4   M     cond1        13.4
4   M     cond2        12.9
')
# 轉換之主題欄位須為 factor
olddata_long$subject <- factor(olddata_long$subject)
str(olddata_long)
olddata_long
olddata_wide <- read.table(header=TRUE, text="
subject sex control cond1 cond2
1   M     7.9  12.3  10.7
2   F     6.3  10.6  11.1
3   F     9.5  13.1  13.8
4   M    11.5  13.4  12.9
")
# 轉換之主題欄位須為 factor
olddata_wide$subject <- factor(olddata_wide$subject)
str(olddata_wide)
olddata_wide
olddata_long <- read.table(header=TRUE, text='
subject sex condition measurement
1   M   control         7.9
1   M     cond1        12.3
1   M     cond2        10.7
2   F   control         6.3
2   F     cond1        10.6
2   F     cond2        11.1
3   F   control         9.5
3   F     cond1        13.1
3   F     cond2        13.8
4   M   control        11.5
4   M     cond1        13.4
4   M     cond2        12.9
')
# 轉換之主題欄位須為 factor
olddata_long$subject <- factor(olddata_long$subject)
str(olddata_long)
olddata_long
# 使用 tidyr 套件
library(tidyr)
# gather: 將寬資料轉換為長資料
data_long <- gather(olddata_wide, condition, measurement, control:cond2)
data_long
olddata_wide
data_long
data_long
data_wide <- spread(olddata_long, condition, measurement)
data_wide
# 使用 reshape2 套件 -----
library(reshape2)
olddata_wide
# method 2
data_long <- melt(olddata_wide,
# ID variables - all the variables to keep but not split apart on
id.vars=c("subject", "sex"),
# The source columns
measure.vars=c("control", "cond1", "cond2" ),
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name="condition",
value.name="measurement")
data_long
data_long
olddata_wide
data_long
olddata_wide
# method 1
melt(olddata_wide, id.vars=c("subject", "sex"))
# method 2
data_long <- melt(olddata_wide,
id.vars=c("subject", "sex"),
measure.vars=c("control", "cond1", "cond2" ),
variable.name="condition",
value.name="measurement")
data_long
data_wide <- dcast(olddata_long, subject + sex ~ condition, value.var="measurement")
data_wide
# rbind -----
x1 <- head(iris, n=3)
(x2 <- tail(iris, n=3))
# rbind -----
(x1 <- head(iris, n=3))
(x2 <- tail(iris, n=3))
xrow <- rbind(x1, x2)
xrow
# cbind -----
(x1 <- head(iris[1:2], n=3))
(x2 <- tail(iris[4:5], n=3))
# cbind -----
(x1 <- head(iris[1:2], n=3))
(x2 <- head(iris[4:5], n=3))
xrow <- cbind(x1, x2) # 附加於 x1 最右側
xcolumn <- cbind(x1, x2) # 附加於 x1 最右側
xcolumn
customer <- data.frame(customerID = c(1:3),
customerAddress = c("台北市", "台中市", "高雄市"),
customerIndex = c(80, 90, 70))
customer
orders <- data.frame(ordersID = c(1:4),
customerID = c(1, 3, 2, 1),
ordersAmount = c(10, 40, 60))
orders <- data.frame(ordersID = c(1:4),
customerID = c(1, 3, 2, 1),
ordersAmount = c(10, 5, 6, 3))
orders
customer
orders
merge(orders, customer)
merge(orders, customer, sort = FALSE)
merge(orders, customer)
merge(orders, customer, sort = FALSE)
merge(orders, customer, all = TRUE)
merge(orders, customer, all.x = TRUE)
customer <- data.frame(customerID = c(1:3),
customerAddress = c("台北市", "台中市", "高雄市"),
customerIndex = c(80, 90, 70))
orders <- data.frame(ordersID = c(1:4),
customerID = c(1, 3, 2, 5),
ordersAmount = c(10, 5, 6, 3))
customer
orders
merge(orders, customer)
merge(orders, customer, all.x = TRUE)
customer <- data.frame(customerID = c(1:3),
customerAddress = c("台北市", "台中市", "高雄市"),
customerIndex = c(80, 90, 70))
orders <- data.frame(ordersID = c(1:4),
customerID = c(1, 3, 2, 5),
ordersAmount = c(10, 5, 6, 3))
customer
orders
merge(orders, customer)
merge(orders, customer, all.x = TRUE)
hr <- read.csv("human_resource.csv")
head(hr)
str(hr)
About 15,000 employee observations and 10 features
The company had a turnover rate of about 24%
Mean satisfaction of employees is 0.61
summary(hr) # 14999*10
table(hr$left)
3571/11428
names(hr)
View(hr)
table(hr$Work_accident)
View(hr)
View(hr)
attrition <- as.factor(data_set$left)
summary(attrition)
attrition <- as.factor(hr$left)
summary(attrition)
hr$left <- as.factor(hr$left)
table(hr$left)
table(hr$left)/nrow(hr)
hr[-c("role", salary)]
hr[-c("role", "salary")
hr[-c("role", "salary")]
hr[-c(9:10)]
aggregate(hr[-c(9:10)], by=list(Category = hr$left), FUN=mean)
aggregate(hr[-c(7, 9:10)], by=list(Category = hr$left), FUN=mean)
aggregate(hr[-c(7, 9:10)], by = list(Category = hr$left), FUN = mean)
# 資料相關性
cor(hr[-c(9:10)])
hr <- read.csv("human_resource.csv")
head(hr)
summary(hr) # 14999*10
str(hr)
# 離職比例?
hr$left <- as.factor(hr$left)
hr <- read.csv("human_resource.csv")
head(hr)
summary(hr) # 14999*10
str(hr)
table(hr$left)/nrow(hr) # 離職比例 24%
# 在職與離職之平均評估值
aggregate(hr[-c(7, 9:10)], by = list(Category = hr$left), FUN = mean)
# 資料相關性
cor(hr[-c(9:10)])
# 資料相關性
hr_cor <- cor(hr[-c(9:10)])
hr_cor
View(hr_cor)
View(hr_cor)
summary(hr) # 14999*10
# 離職比例
table(hr$left)
table(hr$left)/nrow(hr) # 離職比例 24%
pairs(hr-c(9:10))
pairs(hr[-c(9:10)])
pairs(hr[-c(9:10)])
plot(hr$time_spend_company, hr$average_montly_hours)
plot(hr$time_spend_company, hr$satisfaction_level)
plot(hr$last_evaluation, hr$satisfaction_level)
boxplot(hr$last_evaluation)
boxplot(hr$satisfaction_level)
library(nycflights13)
dim(flights)
flights
class(flights) # tbl_df
x <- tbl(iris)
library(dplyr)
flights # 336776*19
library(nycflights13) # 2013年NYC機場航班資料, 33萬筆資料
library(nycflights13) # 2013年NYC機場航班資料, 33萬筆資料
flights # 336776*19
class(flights) # tbl_df
class(flights) # tbl_df
mytbl <- tbl(iris)
mytbl <- as.tbl(iris)
class(mytbl)
str(flights)
summary(flights)
summary(flights) # 有NA
# filter 篩選資料 -----
filter(flights, month == 1, day == 1)
flights[flights$month == 1 & flights$day == 1, ] # 基本指令, same as filter
# filter 篩選資料 -----
filter(flights, month == 1, day == 1)
flights[flights$month == 1 & flights$day == 1, ] # 基本指令, same as filter
# slice 列的指標篩選資料 -----
slice(flights, 1)           # 第1筆
slice(flights, n())         # 最後一筆
slice(flights, 123456:n())  # 第123456筆至最後一筆
slice(flights, n())         # 最後一筆
tail(flights)
summary(flights) # 有NA
head(flights)
tail(flights)
slice(flights, 123456:n())  # 第123456筆至最後一筆
# arrange 排序 -----
arrange(flights, year, month, day)
arrange(flights, desc(arr_delay))
# select 選取行  -----
select(flights, year, month, day)
# Select 選取行, 使用 :
select(flights, year:day)
flights
# Select 選取行, 使用 :
select(flights, year:arr_delay)
# Select 選取行, 使用 :
select(flights, year:dep_delay)
# Select 選取行, 使用 負號, 表示刪除
select(flights, -(year:day))
slice(iris, 1)
# select 更改欄位名稱
select(flights, tail_num = tailnum)
# select 選取行並且更改欄位名稱
select(flights, tail_num = tailnum)
flights
# rename 選取所有行/更改欄位名稱
rename(flights, TailNumber = tail_num) # rename 選取所有資料行
# rename 選取所有行/更改欄位名稱
rename(flights, TailNumber = tailnum) # rename 選取所有資料行
# rename 選取所有行/更改欄位名稱
rename(flights, ActualDepatureTime = dep_time) # rename 選取所有資料行
# distinct 選取不重覆資料 -----
df <- data.frame(
x = sample(10, 100, rep = TRUE), # rep=replace
y = sample(10, 100, rep = TRUE)
)
nrow(df)
# distinct 選取不重覆資料 -----
#
df <- data.frame(
x = sample(10, 100, replace = TRUE), # rep = replace
y = sample(10, 100, rep = TRUE)
)
head(df)
df
# distinct 選取不重覆資料 -----
set.seed(168)
df <- data.frame(
x = sample(10, 100, replace = TRUE), # rep = replace
y = sample(10, 100, rep = TRUE)
) # 100*2
head(df)
nrow(df)
nrow(distinct(df))
nrow(distinct(df, x, y))
distinct(df)
distinct(df)
nrow(distinct(df))
nrow(distinct(df, x, y))
distinct(df, x) # 與下列結果相同 unique(df$x)
distinct(df, y) # 與下列結果相同 unique(df$y)
unique(df$x)
unique(df$y)
# mutate 新增欄位,保留原資料 -----
mutate(mtcars, displ_l = disp / 61.0237)
# transmute 新增欄位, 刪除原資料 -----
transmute(mtcars, displ_2 = disp / 61.0237)
# mutate 新增欄位,保留原資料 -----
mutate(mtcars, displ_l = disp / 61.0237)
# transmute 新增欄位, 不保留原資料 -----
transmute(mtcars, displ_2 = disp / 61.0237)
# summarise 群組計算 -----
summarise(mtcars, mean(disp))
summarise(group_by(mtcars, cyl), mean(disp))
summarise(group_by(mtcars, cyl), m = mean(disp), sd = sd(disp))
mtcars
summarise(group_by(mtcars, cyl), mean(disp))
# A summary applied to ungrouped tbl returns a single row
mtcars %>%
summarise(mean = mean(disp), n = n())
# Usually, you'll want to group first
mtcars %>%
group_by(cyl) %>%
summarise(mean = mean(disp), n = n())
# Each summary call removes one grouping level (since that group
# is now just a single row)
mtcars %>%
group_by(cyl, vs) %>%
summarise(cyl_n = n()) %>%
group_vars()
# Reusing variable names when summarising may lead to unexpected results
mtcars %>%
group_by(cyl) %>%
summarise(disp = mean(disp), sd = sd(disp), double_disp = disp * 2)
# Refer to column names stored as strings with the `.data` pronoun:
var <- "mass"
summarise(starwars, avg = mean(.data[[var]], na.rm = TRUE))
# For more complex cases, knowledge of tidy evaluation and the
# unquote operator `!!` is required. See https://tidyeval.tidyverse.org/
#
# One useful and simple tidy eval technique is to use `!!` to
# bypass the data frame and its columns. Here is how to divide the
# column `mass` by an object of the same name:
mass <- 100
summarise(starwars, avg = mean(mass / !!mass, na.rm = TRUE))
# summarise 群組計算 -----
summarise(mtcars)
# summarise 群組計算 -----
summarise(mtcars, mean())
# summarise 群組計算 -----
summarise(mtcars, mean(x))
# summarise 群組計算 -----
summarise(mtcars, mean(disp))
mtcars
# summarise 群組計算 -----
summarise(mtcars, mean(disp))
summarise(group_by(mtcars, cyl), mean(disp)) # 先群組, 再計算平均值
summarise(group_by(mtcars, cyl), mean(disp)) # 先 group_by 群組, 再計算平均值
str(mtcars)
summarise(group_by(mtcars, cyl), m = mean(disp), sd = sd(disp))
summarise(group_by(mtcars, cyl), mean(disp)) # 先 group_by 群組, 再計算平均值
summarise(group_by(mtcars, cyl), m = mean(disp), sd = sd(disp))
summarise(group_by(mtcars, cyl), 平均值 = mean(disp), 標準差 = sd(disp))
summarise(group_by(mtcars, cyl), 平均值 = mean(disp), 標準差 = sd(disp)) # 先群組, 再計算平均值,標準差
aggregate(mtcars, by=list(cyl), FUN = mean)
aggregate(data=mtcars, by=list(cyl), FUN = mean)
aggregate(x=mtcars, by=list(cyl), FUN = mean)
aggregate(x=mtcars, by=list(mtcars$cyl), FUN = mean)
mtcars
aggregate(x = mtcars["disp"], by = list(mtcars$cyl), FUN = mean)
summarise(group_by(mtcars, cyl), mean(disp)) # 先 group_by 群組, 再計算平均值
summarise(group_by(mtcars, cyl), 平均值 = mean(disp), 標準差 = sd(disp)) # 先群組, 再計算平均值,標準差
summarise(group_by(mtcars, cyl), mean(disp)) # 先 group_by 群組, 再計算平均值
aggregate(x = mtcars["disp"], by = list(mtcars$cyl), FUN = mean)
class(aggregate(x = mtcars["disp"], by = list(mtcars$cyl), FUN = mean))
df = data.frame(a=rnorm(100), b=c(rep('x', 50), rep('y', 50)), c=sample(1:20, 100, replace=T), d=sample(letters,100, replace=T), e=sample(LETTERS,100,replace=T), f=sample("asdasdasdasdfasdfasdfasdfasdfasdfasdfasd asdfasdfsdfsd", 100, replace=T))
ddf= tbl_df(df)
ddf
print.data.frame(ddf)
ddf
getOption("digits")
summarise(group_by(mtcars, cyl), mean(disp)) # 先 group_by 群組, 再計算平均值
aggregate(x = mtcars["disp"], by = list(mtcars$cyl), FUN = mean)
# 上面 summarise 結果, 小數點沒有顯示
data.table(summarise(group_by(mtcars, cyl), mean(disp)))
# 上面 summarise 結果, 小數點沒有顯示
data.frame(summarise(group_by(mtcars, cyl), mean(disp)))
# 上面 summarise 結果, 小數點沒有顯示, 轉換為 data frame即OK.
data.frame(summarise(group_by(mtcars, cyl), mean(disp)))
aggregate(x = mtcars["disp"], by = list(mtcars$cyl), FUN = mean)
# 上面 summarise 結果, 小數點沒有顯示, 轉換為 data frame即OK.
data.frame(summarise(group_by(mtcars, cyl), mean(disp)))
getOption("digits")
getOption("digits")
1/3
options(digits = 10)
1/3
1/3
options(digits = 10)
1/3
# 匯入資料 -----
hr <- read.csv("human_resource.csv")
# 資料摘要
summary(hr) # 14999*10
# 離職比例
table(hr$left)
# 匯出為CSV -----
write.table(iris, file = "iris.csv", sep =",", row.names = FALSE)
dir()
dir("*.csv")
install.packages("XLConnect")
install.packages("XLConnect")
vignette ("XLConnect")
dir()
# 顯示所有資料表
excel_sheets(system.file("extdata/datasets.xlsx", package = "readxl"))
library(readxl)
# 顯示所有資料表
excel_sheets(system.file("extdata/datasets.xlsx", package = "readxl"))
excel_sheets(system.file("extdata/datasets.xls", package = "readxl"))
# 使用 lapply 顯示所有資料表
filepath <- system.file("extdata/datasets.xls", package = "readxl")
x <- lapply(excel_sheets(filepath), read_excel, path = filepath)
x
x[1]
class(x[1])
class(x[1])
class(x)
x
x
x[[1]]
class(x[1])
x[1]
x[[1]]
class(x[[1]])
# 使用 read_excel
# 預設載入第1個工作表
datasets <- system.file("extdata/datasets.xlsx", package = "readxl")
read_excel(datasets) # dafault to first sheet
# 載入特定工作表
read_excel(datasets, 2)
read_excel(datasets, "mtcars")
library(foreign)
urls <- "https://github.com/rwepa/DataDemo/blob/master/school.sav"
db <- read.spss(urls, to.data.frame=TRUE)
urls <- "https://github.com/rwepa/DataDemo/blob/master/school.sav"
db <- read.spss(urls)
db <- read.spss("school.sav")
db
db <- read.spss("school.sav", to.data.frame = TRUE)
head(db)
str(db)
library(sas7bdat)
dd2014 <- read.sas7bdat("h_nhi_ipdte103.sas7bdat") # 14297*80
system.time(dd2014 <- read.sas7bdat("h_nhi_ipdte103.sas7bdat"))
str(dd2014)
class(dd2014)
str(dd2014)
head(dd2014)
head(dd2014)
setwd("C:\\python.book.lee\\data")
dir()
